Data Structure: channels , goroutine 

Functions: We are going to create function called bank_simulation which will take parameters as cashier counter , customer , result and time and for each customer free cashier counter will be get allocated and some time duration will be set for each customer after that customer will leave the counter it is done by using synchronous channels and the result will be stored in result.

Pseudo code:

func bank_simulation(c int, cust <-chan int,rest chan<- int, t int){
	//cust will send data
	//result will store data
        for i := range cust{
                fmt.Println("cashier : ",c," customer : ",i," started")	// print the customer started 
                time.Sleep(time.Duration( t) * time.Millisecond)	// some t timespan is done
                fmt.Println("cashier : ",c," customer : ",i," stopped") //print when customer completed
		result <- i	// stores in result

}
}

func main(){
	doc1 := os.Args[1]	//accept the first argument 
	doc2 := os.Args[2]	//accept the second argument 
	doc3 := os.Args[3]	//accept the third argument 

	s1 := strings.Split(doc1, "=")[1] //split with "=" so that the number will store in form of string

	s2 := strings.Split(doc2, "=")[1]

	s3 := strings.Split(doc3, "=")[1]
	
        c:=strconv.Atoi(s1)	//convert string to int
        cust := strconv.Atoi(s2)
	t:= strconv.Atoi(s3)

	cus := make(chan int, cust)	
	res := make(chan int, cust)

	for co := 1; co <= c; co++ {
		go bank_simulation(co, cus, res, t)
	}
	for cc := 1; cc <= cust; cc++ {
		cus <- cc
	}
	close(cus)
	for a := 1; a <= cust; a++ {
		<-res
	}
}
